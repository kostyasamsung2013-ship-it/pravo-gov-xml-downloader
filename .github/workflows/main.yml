// fetch_xml.js - Устойчивый скрипт для выполнения в GitHub Actions
const fetch = require('node-fetch');
const zlib = require('zlib');
const fs = require('fs/promises'); 

const GZ_URL = "https://pravo.gov.ru/portal/xml/document_list.xml.gz";
const OUTPUT_FILE = 'document_list.xml';
const DOWNLOAD_TIMEOUT_MS = 540000; // 9 минут в миллисекундах (максимальный таймаут GCF)

async function main() {
    console.log(`Начало скачивания с ${GZ_URL} через сервер GitHub...`);
    
    const controller = new AbortController();
    const timeout = setTimeout(() => {
        controller.abort(); // Отмена запроса, если превышен таймаут
    }, DOWNLOAD_TIMEOUT_MS);

    try {
        // 1. Скачивание с таймаутом
        const response = await fetch(GZ_URL, {
            headers: { 'User-Agent': 'GitHub-Actions-Bot/1.0' },
            signal: controller.signal // Привязываем контроллер таймаута
        });
        
        clearTimeout(timeout); // Отмена таймаута, если запрос успешен

        if (response.status === 404) {
             throw new Error("Файл не найден (404). Проверьте URL.");
        }
        if (!response.ok) {
            throw new Error(`Ошибка HTTP: ${response.status} ${response.statusText}`);
        }

        // 2. Распаковка GZip
        const buffer = await response.buffer();
        const xmlBuffer = await new Promise((resolve, reject) => {
            zlib.gunzip(buffer, (err, decompressBuffer) => {
                if (err) return reject(err);
                resolve(decompressBuffer);
            });
        });

        // 3. Сохранение в файл
        const xmlString = xmlBuffer.toString('utf8');
        await fs.writeFile(OUTPUT_FILE, xmlString);
        
        console.log(`✅ Файл успешно скачан, распакован и сохранен как ${OUTPUT_FILE}`);
    } catch (error) {
        clearTimeout(timeout);
        // Если это ошибка таймаута
        if (error.name === 'AbortError') {
             console.error(`❌ Ошибка: Таймаут (${DOWNLOAD_TIMEOUT_MS / 60000} минут) превышен. Файл слишком большой.`);
        } else {
             console.error("❌ Непредвиденная ошибка при скачивании:", error.message);
        }
        // Возврат кода ошибки для GitHub Actions
        process.exit(1); 
    }
}

main();
